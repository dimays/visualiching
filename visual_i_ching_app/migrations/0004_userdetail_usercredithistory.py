# Generated by Django 4.2.1 on 2023-06-19 01:38

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('visual_i_ching_app', '0003_alter_hexagram_options_alter_reading_options_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserDetail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('current_credits', models.IntegerField(db_comment="Represents this user's current number of credits available (1 credit can be exchanged for 1 AI-assisted interpretation on a reading)")),
                ('created_at', models.DateTimeField(auto_now_add=True, db_comment='Time (in UTC) at which this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_comment='Time (in UTC) at which this record was most recently updated')),
                ('deleted_at', models.DateTimeField(blank=True, db_comment="Time (in UTC) at which this record was 'soft-deleted' (flagged deleted)", default=None, null=True)),
                ('user', models.ForeignKey(db_comment="Foreign key, references Django's built-in users.id, represents the user that prepared this reading", on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_details',
                'db_table_comment': "A record for each user, with columns for different user-level details, always meant to represent the user's current state",
                'ordering': ['user', '-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='UserCreditHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('history_type', models.TextField(db_comment="String indicating the type of credit event this record represents (eg. 'Purchase', 'Redemption', etc.)")),
                ('credits_amount', models.IntegerField(db_comment="Integer representing the number of credits added to or deducted from the user's account")),
                ('stripe_payment_intent_id', models.TextField(blank=True, db_comment="Only populated for 'Purchase' records, indicating the Stripe Payment Intent related to this credit bundle purchase", default=None, null=True)),
                ('credits_bundle_name', models.TextField(blank=True, db_comment="Only populated for 'Purchase' records, indicating the name of the item purchased (eg. '$5 for 10')", default=None, null=True)),
                ('payment_amount', models.IntegerField(blank=True, db_comment="Only populated for 'Purchase' records, indicating the total amount spent on this purchase in cents", default=None, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_comment='Time (in UTC) at which this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_comment='Time (in UTC) at which this record was most recently updated')),
                ('deleted_at', models.DateTimeField(blank=True, db_comment="Time (in UTC) at which this record was 'soft-deleted' (flagged deleted)", default=None, null=True)),
                ('user', models.ForeignKey(db_comment="Foreign key, references Django's built-in users.id, represents the user that prepared this reading", on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_credit_history',
                'db_table_comment': 'A historical record for each credit transaction, including credit purchases, credit grants from special offers, and credit redemptions from generating an AI-assisted interpretation for a reading',
                'ordering': ['user', '-created_at'],
            },
        ),
    ]
